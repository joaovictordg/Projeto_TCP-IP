#include <Stepper.h>
#include <SPI.h>
#include <Ethernet.h>


// MAC address from Ethernet shield sticker under board
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 117); // IP address, may need to change depending on network
EthernetServer server(80);  // create a server at port 80
const int ledPin = 13;

const int e1 = 6;
const int e2 = 7;
const int e3 = 8;
const int e4 = 9;

const int passosPorGiro=64;
Stepper mp(passosPorGiro,e1,e3,e2,e4);
void motor(int vel, int sentido,int loop,int tmp, int passos){
  mp.setSpeed(vel);
  for(int i=0;i<passos*loop;i++){
  mp.step(passosPorGiro*sentido);
   
  delay(tmp);
}
delay(tmp*2);
}

void setup()
{
    Serial.begin(9600);
    Ethernet.begin(mac, ip);  // initialize Ethernet device
    server.begin();           // start to listen for clients
     pinMode(ledPin, OUTPUT); //DEFINE O PINO COMO SAÍDA
    digitalWrite(ledPin, LOW);
    
}


void loop()
{
    EthernetClient client = server.available();  // try to get client

    if (client) {  // got client?
        boolean currentLineIsBlank = true;
        while (client.connected()) {
            if (client.available()) {   // client data available to read
                char c = client.read(); // read 1 byte (character) from client
                   if(c=='E'){
                  motor(500,1,1,0,32);
                       
                      delay(3000);
                  } 
                  if(c=='D'){
                       motor(500,-1,1,0,32);
                        delay(3000);  
                                          
                  }                        
                if (c == '\n' && currentLineIsBlank) {
                    // send a standard http response header
                     
                    client.println("HTTP/1.1 200 OK");
                    client.println("Content-Type: text/html");
                    client.println("Connection: close");
                    client.println();
                    // send web page
                    client.println("<!DOCTYPE html>");
                    client.println("<html>");
                    client.println("<head>");
                    client.println("<title>Arduino Web Page</title>");
                    client.println("</head>");
                    client.println("<body>");
                    client.println("<h1>Hello from Arduino!</h1>");
                    client.println("<p>A web page from the Arduino server</p>");
                    client.println("</body>");
                    client.println("</html>");

                    break;
                
                // every line of text received from the client ends with \r\n
                if (c == '\n') {
                    // last character on line of received text
                    // starting new line with next character read
                  
  }
                                
                           
                    currentLineIsBlank = true;
                } 
                else if (c != '\r') {
                    // a text character was received from client
                    currentLineIsBlank = false;
                }
            } // end if (client.available())
        } // end while (client.connected())
        delay(1);      // give the web browser time to receive the data
        client.stop(); // close the connection
    } // end if (client)
}
